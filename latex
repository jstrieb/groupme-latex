#!/usr/bin/python3

import os
import json
import time
import shlex
import subprocess
import requests


##################################################
# Global Macros
##################################################

API_ADDR = "https://api.groupme.com/v3/bots/post"
PNG_RESOLUTION = 800
LATEX_TEMPLATE_PATH = "template.tex"
LATEX_TEMPLATE_REPLACE_TEXT = "$ equation goes here $"
OUTPUT_PATH = "/var/www/html/latex"

# XXX: Fill in the following before use
# Sensitive credentials
BOT_ID = "[ FILL IN ]"
API_ACCESS_TOKEN = "[ FILL IN ]"
SERVER_BASE_URL = "[ FILL IN ]"


##################################################
# Helper Functions
##################################################

def send(message, image_path=None):
    """Send message from the bot to the group chat. Limit the size of the sent
    message text to 990 characters based on GroupMe's character limit.

    If an image path is included, upload it to GroupMe and attach the proper
    image URL to the message that is sent.
    """
    data = { "bot_id": BOT_ID, "text": message[:990] }

    if image is not None:
        # Upload to GroupMe
        with open(image_path, "rb") as image_data:
            r = requests.post(url="https://image.groupme.com/pictures",
                    data=image_data,
                    headers={ "X-Access-Token": API_ACCESS_TOKEN,
                        "Content-Type": "application/png" })
        uploaded_url = j.json()["payload"]["picture_url"]

        # Add uploaded URL to JSON data that will be POSTed
        data["attachments"] = [ { "type": "image", "url": uploaded_url } ]

    requests.post(API_ADDR, json=data)


# NOTE: For typical server configurations, the file being written-to (or
#       its containing folder) must have permissions 666
def write_file(path, text):
    with open(path, "w") as f:
        f.write(text)

def latex_doc(equation):
    """Load the LaTeX template from the global macro path, add the input
    equation to its appropriate place in the middle, and return the text to be
    compiled as a string.
    """
    with open(LATEX_TEMPLATE_PATH, "r") as f:
        template = f.read()

    return template.replace(LATEX_TEMPLATE_REPLACE_TEXT, equation)


##################################################
# Main Function
##################################################

def process_message(data):
    """Check whether the message data contains an equation based on whether the
    text starts and ends with at least one dollar sign. If it does, attempt to
    render it as LaTeX locally. Then, attempt to convert to PNG from PDF.
    Finally, send it back to the user in the group chat.
    """
    text = data.get("text", "")

    # Handle the user asking for help
    if text.lower() == "help":
        send("$ enter equation between dollar signs $")
        return

    # Only continue if the text starts and ends with dollar signs
    if not (text.startswith("$") and text.endswith("$")): return

    # Write out the standalone document with the user's equation
    doc = latex_doc(text)
    t = time.time() # save the time for consistency across later operations
    path = f"{OUTPUT_PATH}/{t}.tex"
    write_file(path, doc)

    # Compile the document to PDF using pdfLaTeX
    latex_cmd = f"pdflatex {t}.tex"
    subprocess.run(shlex.split(latex_cmd), check=True, cwd=OUTPUT_PATH)

    # Convert the PDF to PNG
    convert_cmd = (f"pdftoppm {t}.pdf {t} -png -rx {PNG_RESOLUTION} "
            f"-ry {PNG_RESOLUTION}")
    subprocess.run(shlex.split(convert_cmd), check=True, cwd=OUTPUT_PATH)

    # Send the converted image to GroupMe
    send("", image_path=f"{OUTPUT_PATH}/{t}-1.png")


def main(data):
    # Don't allow bots to respond to each other
    if data.get("sender_type", "") == "bot": return

    try:
        process_message(data)
    except Exception as e:
        # Catch exceptions and send them if they occur -- makes debugging
        # considerably easier
        send(f"Exception\n{str(e)}")


if __name__ == "__main__":
    # NOTE: Uncomment the line below before printing HTML output
    # print("Content-type: text/html\n\n")

    # Try to get cgi-bin input data, then process it
    try:
        # Try to get GET data if possible, otherwise get POST data
        if os.getenv("QUERY_STRING"):
            data = os.getenv("QUERY_STRING")
        else:
            data = sys.stdin.read()

        # Try to parse the input as JSON. If it works, process it
        try:
            data = json.loads(data)
            main(data)
        except Exception as e: pass
    except Exception as e: pass
